openapi: 3.0.0
info:
  title: Todoapp
  description: Todoapp web api
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
    description: Local Development Web API
paths:
  /auth/signup:
    post:
      summary: Create a new user
      description: User Registration
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserForm'
      responses:
        '201':
          description: A user object and jwt token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
              examples:

  /auth/signin:
    post:
      summary: Returns user info and token
      description: User Login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '201':
          description: A user object and jwt token
  /users/me:
    get:
      security:
        - bearerAuth: []
      summary: Returns the current user
      description: 
      responses:
        '200':    # status code
          description: a JSON array of user info
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      security:
        - bearerAuth: []
      summary: Update info of the current user
      description: 
      responses:
        '200':    # status code
          description: a JSON array of user info
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /todos/create:
    post:
  /todos/update/{id}:
    put:
  /todos/delete/{id}:
    delete:
components:
  schemas:
    Users:
      type: object
    UserForm:
      type: object
      properties:
        name:
          type: string
          description: username
        email:
          type: string
          description: user's email
        password:
          type: string
          description: user's password
      required:
        - name
        - email
        - password
    UserLogin:
      type: object
      properties:
        email:
          type: string
          description: user's email
        password:
          type: string
          description: user's password
      required:
        - email
        - password
    Users:
      type: 
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
